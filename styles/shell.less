@import '_variables';
@import '_mixins';
@import '_data';

body {
	font-family: 'PT Sans', sans-serif;
}
*:before, *:after {
	font-family: inherit;
}

body, *:before, *:after {
	box-sizing: border-box;
}

html, body {
	margin: 0;
	padding: 0;
	height: 100%;
	overflow: hidden;
}

body > input {
	// Hide state inputs.
	position: absolute;
	opacity: 0;
}

label[for="hamburger-toggle"] {
	user-select: none;
	cursor: pointer;
	margin-right: 16px;
}

.Root {
	display: flex;
	flex-direction: column;
	height: 100%;
}

header {
	height: 64px;
	padding: 0 16px;
	background: #673AB7;
	color: white;
	box-shadow: 0 0 4px rgba(0, 0, 0, 0.14),0 4px 8px rgba(0, 0, 0, 0.28);
	align-items: center;
	display: flex;
	flex-shrink: 0;

	.Spacer {
		flex-grow: 1;
	}

	label {
		&:not(:first-child) {
			margin-left: 16px;
		}

		font-size: 16px;
		padding: 8px;
		border-radius: 4px;
		cursor: pointer;
		color: rgba(255,255,255, .87);
		transition: background-color @transition, color @transition;
		line-height: 1;


		&:hover {
			background-color: rgba(153, 153, 153, .2);
		}

		#view-thumbnail:checked ~ .Root &[for="view-thumbnail"],
		#view-list:checked ~ .Root &[for="view-list"] {
			color: white;
			background-color: rgba(153, 153, 153, .4);
		}
	}
}

.Hamburger {
	@width: 256px;

	position: absolute;
	top: 0;
	bottom: 0;
	left: -@width;
	width: @width;
	transition: left @transition;
	background-color: white;
	z-index: 100;
	overflow: auto;
	box-shadow: 4px 0 10px 0 rgba(0,0,0,0.15);

	.Separator {
		padding-bottom: 8px;
		border-bottom: solid 1px #333;
		margin-bottom: 8px;
	}

	a {
		display: block;
		background-color: white;
		transition: background-color @transition;
		padding: 16px;
		font-weight: inherit;
		color: black;
		text-decoration: none;

		&:hover {
			background-color: #D1C4E9;
		}
	}
}

.Content {
	overflow: auto;
	flex-grow: 1;
	position: relative;
}

.EachCategory({
	#@{id}:target ~ .Root .Title:after {
		content: @displayName;
	}
	.Hamburger a[href="#@{id}"]:after {
		content: @displayName;
	}

	#@{id}:target ~ .Root .Hamburger a[href="#@{id}"] {
		background-color: #9575CD;
		font-weight: bold;
	}
});

 // Since there is no way to apply :target to an empty fragment,
 // I style the default (About) page to render, until overridden
 // by a category target.
 .Title:after{
	 content: 'About';
 }

 // This must be more specific than the above normal :hover
 // selector, to suppress the hover background when active.
 // It also must not match the :extend() selector below.
.Root .Hamburger a[href="#"] {
	background-color: #9575CD;
	font-weight: bold;
	// When any other target is selected, override the selection styling (including hover).
	.CategoryTarget:target ~ &:extend(.Hamburger a all) {}
}

#hamburger-toggle:focus ~ .Root .Hamburger {
	left: 0;
}

.AboutPage {
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	padding: 32px;
	box-sizing: border-box;
	background: white;
	transition: top @transition;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	// When any category is selected, hide this page.
	.CategoryTarget:target ~ .Root & {
		top: -100%;
	}

	p {
		max-width: 800px;
	}
}

